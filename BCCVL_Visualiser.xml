<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.17.0">
      <projectUrl>https://github.com/BCCVL/BCCVL_Visualiser/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>DOCKER_PUSH</name>
          <description>Flag to indicate that successful builds should be pushed to the selected docker registry</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_USERNAME</name>
          <description>Username for the Docker Registry Account</description>
          <defaultValue>bccvl</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_EMAIL</name>
          <description>Email Address for the Docker Registry Account</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>DOCKER_PASSWORD</name>
          <description>Docker Registry Password</description>
          <defaultValue>C7dijUKnlhfGpNXoikb0zw==</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_REGISTRY</name>
          <description>Docker Registry URL</description>
          <defaultValue>hub.docker.com</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.2">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/BCCVL/BCCVL_Visualiser.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/develop</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>set +e
#Default compose args
COMPOSE_ARGS=&quot; -f jenkins.yml -p jenkins &quot;
TAG=$(git describe --tags --exact-match)
if [ $? -eq 0 ]; then
  HAS_TAG=true
else
  HAS_TAG=false
fi
HASH=$(git rev-parse --short HEAD)
BRANCH_NAME=${GIT_BRANCH##origin/}

#Make sure old containers are gone
sudo docker-compose $COMPOSE_ARGS stop
sudo docker-compose $COMPOSE_ARGS rm --force -v

#build the system
# TODO: evaluate if builds should use --no-cache 
if [ $HAS_TAG = true ]; then
  BUILD_ARGS=&quot; --no-cache &quot;
fi

sudo docker-compose $COMPOSE_ARGS build $BUILD_ARGS
exit $?</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>set +e
#Default compose args
COMPOSE_ARGS=&quot; -f jenkins.yml -p jenkins &quot;
TAG=$(git describe --tags --exact-match)
if [ $? -eq 0 ]; then
  HAS_TAG=true
else
  HAS_TAG=false
fi
HASH=$(git rev-parse --short HEAD)
BRANCH_NAME=${GIT_BRANCH##origin/}

#Run unit tests
RANDID=$(date | md5sum | head -c 6)
CONTAINER_ID=jenkins_visualiser_$RANDID
sudo docker-compose $COMPOSE_ARGS run --no-deps -e ENV=UNIT --name=$CONTAINER_ID visualiser
ERR=$?
sudo docker cp $CONTAINER_ID:/tmp/nosetests.xml ./nosetests.xml
sudo docker cp $CONTAINER_ID:/tmp/coverage.xml ./coverage.xml.tmp
sed &quot;s#&lt;\!-- Generated by coverage.py: http:\/\/nedbatchelder.com\/code\/coverage --&gt;#&lt;sources&gt;&lt;source&gt;$WORKSPACE/BCCVL_Visualiser&lt;\/source&gt;&lt;\/sources&gt;#g&quot; ./coverage.xml.tmp &gt; ./coverage.xml
rm -f ./coverage.xml.tmp

sudo docker rm --force $CONTAINER_ID

sudo docker-compose $COMPOSE_ARGS up -d --no-build
CONTAINER_ID=$(sudo docker-compose $COMPOSE_ARGS ps -q)

#Run system test if unit tests passed
if [ $ERR -eq 0 ]; then
  IP=$(sudo docker inspect -f {{.NetworkSettings.IPAddress}} $CONTAINER_ID)
  CODE=$(curl -sL -w &quot;%{http_code}&quot; $IP:10600/api -o /dev/null) || true
  if [ $CODE -eq 200 ]; then
    echo &quot;Test passed - Tagging&quot;
    sudo docker tag -f jenkins_visualiser ${DOCKER_REGISTRY}/bccvl/visualiser:$HASH
    sudo docker tag -f jenkins_visualiser ${DOCKER_REGISTRY}/bccvl/visualiser:&quot;${BRANCH_NAME}-latest&quot;
    if [ $HAS_TAG = true ]; then
      sudo docker tag -f jenkins_visualiser ${DOCKER_REGISTRY}/bccvl/visualiser:$TAG
        if [ $BRANCH_NAME = &quot;master&quot; ]; then
          sudo docker tag -f jenkins_visualiser ${DOCKER_REGISTRY}/bccvl/visualiser:latest
        fi
    fi   
  else
    echo &quot;Site returned &quot; $CODE
    ERR=1
  fi
fi

#Pull down the system
sudo docker-compose $COMPOSE_ARGS stop
sudo docker-compose $COMPOSE_ARGS rm --force -v

exit $ERR
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>set +e
COMPOSE_ARGS=&quot; -f jenkins.yml -p jenkins &quot;
TAG=$(git describe --tags --exact-match)
if [ $? -eq 0 ]; then
  HAS_TAG=true
else
  HAS_TAG=false
fi
HASH=$(git rev-parse --short HEAD)
BRANCH_NAME=${GIT_BRANCH##origin/}
set -e

if [ $DOCKER_PUSH = true ]; then
  echo &quot;Pushing&quot;
  if [[ ! -z ${DOCKER_USERNAME+x} ]] &amp;&amp; [[ ! -z ${DOCKER_PASSWORD+x} ]]; then
    if [[ -z ${DOCKER_EMAIL+x} ]]; then
      DOCKER_EMAIL=&quot;${DOCKER_USERNAME}@localhost&quot;
    fi
    sudo docker login -e $DOCKER_EMAIL -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY
  fi
  sudo docker push ${DOCKER_REGISTRY}/bccvl/visualiser:$HASH
  sudo docker push ${DOCKER_REGISTRY}/bccvl/visualiser:&quot;${BRANCH_NAME}-latest&quot;
  if [ $HAS_TAG = true ]; then
      sudo docker push ${DOCKER_REGISTRY}/bccvl/visualiser:$TAG
      if [ $BRANCH_NAME = &quot;master&quot; ]; then        
        sudo docker push ${DOCKER_REGISTRY}/bccvl/visualiser:latest
      fi
  fi
else
  echo &quot;Pushing of images disabled&quot;
fi </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.cobertura.CoberturaPublisher plugin="cobertura@1.9.7">
      <coberturaReportFile>coverage.xml</coberturaReportFile>
      <onlyStable>false</onlyStable>
      <failUnhealthy>false</failUnhealthy>
      <failUnstable>false</failUnstable>
      <autoUpdateHealth>false</autoUpdateHealth>
      <autoUpdateStability>false</autoUpdateStability>
      <zoomCoverageChart>false</zoomCoverageChart>
      <maxNumberOfBuilds>0</maxNumberOfBuilds>
      <failNoReports>false</failNoReports>
      <healthyTarget>
        <targets class="enum-map" enum-type="hudson.plugins.cobertura.targets.CoverageMetric">
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>METHOD</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>8000000</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>LINE</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>8000000</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>CONDITIONAL</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>7000000</int>
          </entry>
        </targets>
      </healthyTarget>
      <unhealthyTarget>
        <targets class="enum-map" enum-type="hudson.plugins.cobertura.targets.CoverageMetric">
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>METHOD</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>LINE</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>CONDITIONAL</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
        </targets>
      </unhealthyTarget>
      <failingTarget>
        <targets class="enum-map" enum-type="hudson.plugins.cobertura.targets.CoverageMetric">
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>METHOD</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>LINE</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
          <entry>
            <hudson.plugins.cobertura.targets.CoverageMetric>CONDITIONAL</hudson.plugins.cobertura.targets.CoverageMetric>
            <int>0</int>
          </entry>
        </targets>
      </failingTarget>
      <sourceEncoding>ASCII</sourceEncoding>
    </hudson.plugins.cobertura.CoberturaPublisher>
    <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.2-beta-4">
      <testResults>nosetests.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <testDataPublishers/>
      <healthScaleFactor>1.0</healthScaleFactor>
    </hudson.tasks.junit.JUnitResultArchiver>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.28">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
  </buildWrappers>
</project>